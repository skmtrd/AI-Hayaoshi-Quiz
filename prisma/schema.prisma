// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  rating        Float?          @default(0)
 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  solvers       Solver[]
  roomUsers     RoomUser[]
  results       Result[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
 
  user User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model RoomUser {
  id        String    @id @default(cuid())
  room      Room      @relation(fields: [roomId], references: [id])
  roomId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  isHost    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, roomId])
}

// 部屋
model Room {
  id        String    @id @default(cuid())
  theme     String
  RoomUser RoomUser[]
  ownerId   String
  numberOfUser Int @default(0)
  status    RoomStatus @default(WAITING)
  types     String
  maxPlayer Int?
  buttonTimeStamp DateTime?
  currentSolverId String?
  inviteId  String    @unique
  difficulty Float?
  answerTimeLimit Int? // ボタンを押してからの制限時間
  thinkingTimeLimit Int? // 問題が表示されてからの制限時間
  questions Question[]
  questionOpenTimeStamp DateTime?
  currentQuestionId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Result Result[]

  @@index([theme])
}

enum RoomStatus {
  WAITING
  PLAYING
  FINISHED
}



model Question {
  id       String    @id @default(cuid())
  question String
  answer   String
  incorrectAnswers String[]
  comment  String
  room     Room      @relation(fields: [roomId], references: [id])
  roomId   String
  solvers   Solver[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId])
}

// 回答者の回答(不正解を含む)
model Solver {
  id         String   @id @default(cuid())
  isCorrect  Boolean
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([questionId])
}


// 試合結果によるレート変動
model Result {
  id          String   @id @default(cuid())
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  ratingDelta Float?   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roomId])
  @@index([userId])
}

